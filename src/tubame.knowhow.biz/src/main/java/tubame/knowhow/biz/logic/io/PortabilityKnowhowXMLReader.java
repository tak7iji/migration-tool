/*
 * PortabilityKnowhowXMLReader.java
 * Created on 2013/06/28
 *
 * Copyright (C) 2011-2013 Nippon Telegraph and Telephone Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package tubame.knowhow.biz.logic.io;

import java.io.IOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.stream.StreamSource;

import org.docbook.ns.docbook.Article;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xml.sax.SAXException;

import tubame.knowhow.biz.exception.JbmException;
import tubame.knowhow.biz.model.generated.knowhow.PortabilityKnowhow;
import tubame.knowhow.biz.util.JaxbUtil;
import tubame.knowhow.biz.util.resource.ApplicationPropertiesUtil;
import tubame.knowhow.biz.util.resource.MessagePropertiesUtil;

/**
 * The use of the object that is automatically generated by JAXB, <br/>
 * allow you to load processing know-how of XML file.<br/>
 * To read the XML file in the know-how Unmarshaller method of JAXB,<br/>
 * Get PortabilityKnowhow object.<br/>
 */
public class PortabilityKnowhowXMLReader implements PortabilityKnowhowRead {

    /** Logger */
    private static final Logger LOGGER = LoggerFactory
            .getLogger(PortabilityKnowhowXMLReader.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public PortabilityKnowhow read(String filePath) throws JbmException {

        LOGGER.debug("[PortabilityKnowhoFilePath]=" + filePath);
        // Getting path from resource
        URL url = getUrl(filePath);
        if (url == null) {
            throw new JbmException(
                    MessagePropertiesUtil
                            .getMessage(MessagePropertiesUtil.ERROR_XML_READ_FAIL_KNOWHOW),
                    null);
        }
        PortabilityKnowhow portabilityKnowhow = new PortabilityKnowhow();
        Map<String, Integer> errMap = new HashMap<String, Integer>();
        try {
            LOGGER.trace(MessagePropertiesUtil
                    .getMessage(MessagePropertiesUtil.LOG_START_PORTABILITY_KNOWHOW_READER));
            // Generation of Anne marshaller
            Unmarshaller unmarshaller = JaxbUtil
                    .getUnmarshaller(
                            PortabilityKnowhow.class,
                            ApplicationPropertiesUtil
                                    .getProperty(ApplicationPropertiesUtil.PORTABILITYKNOWHOWSCHEMA_PATH),
                            errMap);
            // Set to PortabilityKnowhow the contents of the know-how XML read
//            portabilityKnowhow = (PortabilityKnowhow) unmarshaller
//                    .unmarshal(NonDTDCheckEntityResolver.createDocument(
//                            url.getFile(),
//                            ApplicationPropertiesUtil
//                                    .getProperty(ApplicationPropertiesUtil.KNOWHOW_ENCODE)));
            StreamSource streamSource = new StreamSource(
            		Files.newBufferedReader(Paths.get(url.toURI()), Charset.forName(ApplicationPropertiesUtil
                            .getProperty(ApplicationPropertiesUtil.KNOWHOW_ENCODE))));
            portabilityKnowhow = (PortabilityKnowhow) unmarshaller.unmarshal(streamSource);
            LOGGER.trace(MessagePropertiesUtil
                    .getMessage(MessagePropertiesUtil.LOG_STOP_PORTABILITY_KNOWHOW_READER));
        } catch (JAXBException e) {
            LOGGER.error("[FilePath]=" + filePath);
            LOGGER.error(
                    MessagePropertiesUtil
                            .getMessage(MessagePropertiesUtil.ERROR_XML_READ_FAIL_KNOWHOW),
                    e);
            String errMessage = JaxbUtil
                    .getUnmarshalErrorMessage(
                            MessagePropertiesUtil
                                    .getMessage(MessagePropertiesUtil.ERROR_XML_READ_FAIL_KNOWHOW),
                            errMap);
            throw new JbmException(errMessage, e);
        } catch (IOException e) {
            throw createJbmException(
                    filePath,
                    MessagePropertiesUtil
                            .getMessage(MessagePropertiesUtil.ERROR_XML_READ_FAIL_KNOWHOW),
                    e);
//        } catch (ParserConfigurationException e) {
//            throw createJbmException(
//                    filePath,
//                    MessagePropertiesUtil
//                            .getMessage(MessagePropertiesUtil.ERROR_XML_READ_FAIL_KNOWHOW),
//                    e);
        } catch (IllegalArgumentException e) {
            throw createJbmException(
                    filePath,
                    MessagePropertiesUtil
                            .getMessage(MessagePropertiesUtil.ERROR_XML_READ_FAIL_KNOWHOW),
                    e);
        } catch (Exception e) {
            throw createJbmExceptionJaxBInformation(
                    filePath,
                    MessagePropertiesUtil
                            .getMessage(MessagePropertiesUtil.ERROR_XML_READ_FAIL_KNOWHOW),
                    e, errMap);
        }
        return portabilityKnowhow;

    }

    /**
     * Create JbmException.<br/>
     * 
     * @param filePath
     *            Target file path
     * @param message
     *            Error message
     * @param e
     *            Exception information
     * @return JbmException that is generated
     */
    protected JbmException createJbmException(String filePath, String message,
            Exception e) {
        LOGGER.error("[FilePath]=" + filePath);
        LOGGER.error(MessagePropertiesUtil.getMessage(message), e);
        return new JbmException(MessagePropertiesUtil.getMessage(message), e);
    }

    /**
     * Create JbmException.<br/>
     * 
     * @param filePath
     *            Target file path
     * @param message
     *            Error message
     * @param e
     *            Exception information
     * @param errorMap
     *            Check the contents
     * @return JbmException that is generated
     */
    protected JbmException createJbmExceptionJaxBInformation(String filePath,
            String message, Exception e, Map<String, Integer> errorMap) {
        LOGGER.error("[FilePath]=" + filePath);
        LOGGER.error(MessagePropertiesUtil.getMessage(message), e);
        String errMessage = JaxbUtil.getUnmarshalErrorMessage(
                MessagePropertiesUtil.getMessage(message), errorMap);
        return new JbmException(errMessage, e);
    }

    /**
     * Get a file URL.<br/>
     * 
     * @param filepath
     *            File Path
     * @return url
     */
    protected URL getUrl(String filepath) {
        return this.getClass().getResource(filepath);
    }
}
